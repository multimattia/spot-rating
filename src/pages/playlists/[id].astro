---
const { id } = Astro.params;
import { db, User, Session, eq, sql } from "astro:db";
import { Image } from "astro:assets";
import type PlaylistReturnObject from "../../types/spotifyTypes";
import TrackListing from "@components/TrackListing.astro";
import { spotify } from "src/lib/auth";

const luciaUser = Astro.locals.user;
if (!luciaUser) {
  return Astro.redirect("/login");
}

const existingUser = (
  await db
    .select()
    .from(User)
    .where(sql`${User.id} = ${luciaUser.id}`)
)[0];

const session = await db
  .select()
  .from(Session)
  .where(eq(existingUser.id, Session.userId));

const spotifyTrackResponse = await fetch(
  `https://api.spotify.com/v1/playlists/${id}?fields=name%2Cimages%28url%2C+width%2C+height%29%2C+followers%28total%29%2C+owner%28id%2Cdisplay_name%29%2C+tracks%28items%28added_at%2C+added_by%28id%29%2Ctrack%28name%2C+album%28images%28%29%2C+name%29%2Cartists%28name%29%2Cduration_ms%29%2Ctotal%29`,
  {
    headers: {
      Authorization: `Bearer ${session[0].accessToken}`,
    },
  }
);

let spotifyTrackData;
if (spotifyTrackResponse.ok) {
  spotifyTrackData = await spotifyTrackResponse.json();
} else {
  console.error(
    "error: ",
    spotifyTrackResponse.status,
    spotifyTrackResponse.statusText
  );
  spotifyTrackData = [];
}
---

<h1>{spotifyTrackData.name}</h1>
<h3>by {spotifyTrackData.owner.display_name}</h3>
<h4>{spotifyTrackData.followers.total} followers</h4>
<TrackListing trackData={spotifyTrackData.tracks.items} id={id} />
