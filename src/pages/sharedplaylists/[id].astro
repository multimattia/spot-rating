---
const { id } = Astro.params;
import { db, Songs_Temp, sql } from "astro:db";
import { Image } from "astro:assets";
import LocalSong from "@components/LocalSong.astro";
import BaseLayout from "@layouts/BaseLayout.astro";

import type { Song } from "@components/LocalSong.astro";

let playlistInfo;
try {
  playlistInfo = await fetch(
    `https://api.spotify.com/v1/playlists/${id}?fields=name%2C,description%2Cowner%28display_name%29%2C+images%28url%29`,
    {
      headers: {
        Authorization: `Bearer ${Astro.locals.accessToken}`,
      },
    }
  );
} catch (e) {
  return Astro.redirect("/api/logout");
}

const playlistData = await playlistInfo.json();

const savedSongs = await db
  .select()
  .from(Songs_Temp)
  .where(sql`${id} = ${Songs_Temp.playlistId}`);

console.log(JSON.stringify(playlistData, null, 2));
---

<BaseLayout
  title={`Playlist: ${"asd"}`}
  existingUser={Astro.locals.currentUser}
>
  <div class="playlist-header">
    <Image src={playlistData.images[0].url} alt="" width="200" height="200" />
    <div class="playlist-info">
      <h2>
        {playlistData.name}
      </h2>
      <h5>By {playlistData.owner.display_name}</h5>
      <h5>{playlistData.description}</h5>
    </div>
  </div>
  {savedSongs.map((item: Song) => <LocalSong songInfo={item} />)}
</BaseLayout>

<style>
  .playlist-header {
    margin: 3rem 1rem;
    padding-bottom: 2rem;
    display: flex;
    align-items: center;
    gap: 3rem;
    background: rgb(0, 0, 0);
    background: linear-gradient(
      347deg,
      rgba(0, 0, 0, 0.17) 0%,
      rgba(255, 255, 255, 1) 58%
    );
  }
  h2 {
    margin: var(--space-m) 0;
  }
</style>
