---
import type { PlaylistTrackObject } from "../types/spotifyTypes.ts";
import { Image } from "astro:assets";

let playlistDataArray: PlaylistTrackObject[];

const { id } = Astro.props;

let allTracksFetched;
if ("trackData" in Astro.props && Array.isArray(Astro.props.trackData)) {
  playlistDataArray = Astro.props.trackData as PlaylistTrackObject[];
  allTracksFetched = playlistDataArray.length < 100;
} else {
  playlistDataArray = [];
}

function formatDuration(durationMs: number) {
  const minutes = Math.floor(durationMs / 60000);
  const seconds = Math.floor((durationMs % 60000) / 1000);
  return `${minutes}:${seconds.toString().padStart(2, "0")}`;
}
---

<div class="main-list">
  <div id="count-cluster">
    <p id="song-count">0 songs</p>
    <form method="get" action=`/api/save/${id}`>
      <button id="post-playlist-button" class="disabled"
        >Add playlist to profile</button
      >
    </form>
    <p id="fetch-indicator">Fetching playlist entries from Spotify...</p>
  </div>
  <playlist-id
    data-id={id}
    data-all-fetched={allTracksFetched ? "yes" : "no"}
    class="playist-cluster"
  >
    <div class="desc header">
      <p id="track-header">Title</p>
      <p id="artist-names">Artist</p>
      <p id="added-name">Added by</p>
      <p id="duration-length">Duration</p>
    </div>
    {
      playlistDataArray.map((item, index) => (
        <div class="playlist">
          <div class="desc">
            <div class="track-cluster">
              <Image
                src={
                  item.track?.album?.images[0]?.url
                    ? item.track?.album?.images[0]?.url
                    : "https://kagi.com/proxy/360_F_248426448_NVKLywWqArG2ADUxDq6QprtIzsF82dMF.jpg?c=l0oPx0FvhjhG2vnK29uE37OLQc-WdefmvQp_UcLKL29LDJEkeYiVhvf2KWXWGustLbBUuFUVTrSjFGd_d3GuBmPOffiZmHemGi6a-Uj_O0D_Dbnq01_FkRla6Ecmv6akMJ1xYVkRKnmiEtwwYeItBw%3D%3D"
                }
                alt=""
                width="50"
                height="50"
              />
              <p id="track-name">{item.track.name}</p>
            </div>
            <p id="artist-names">
              {item.track.artists.map((artist) => artist.name).join(", ")}
            </p>
            <p id="added-name">
              {item.added_by.id ? item.added_by.id : "Spotify"}
            </p>
            <p id="duration-length">{formatDuration(item.track.duration_ms)}</p>
          </div>
        </div>
      ))
    }
  </playlist-id>
  <div class="test"></div>
</div>

<style>
  .disabled {
    opacity: 0.5;
    pointer-events: none;
    cursor: not-allowed;
  }

  #count-cluster {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .main-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .loading-fade {
    color: gray;
  }

  #track-header {
    margin-left: 1rem;
  }

  .desc p {
    width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  #track-name {
    width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .track-cluster {
    display: flex;
    gap: 1rem;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .playlist {
    height: 5rem;
  }

  .playlist img {
    margin-left: 1rem;
  }

  .desc {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    width: 100%;
    display: grid;
    grid-template-columns: 3fr 2fr 2fr 1fr;
    grid-template-rows: 1fr;
    gap: 1rem;
  }

  .desc p {
    text-overflow: ellipsis;
    text-align: start;
  }

  .playlist {
    display: flex;
    align-items: center;
    gap: 3.7rem;
    border-top: 1px solid #ececec;
  }

  .playlist:nth-of-type(even) {
    background-color: #fafafb;
  }

  .playlist:hover {
    background-color: #ebebeb;
    transition: all 0.2s ease-out;
  }
</style>

<script>
  interface SpotifyTrack {
    track: {
      album: {
        images: {
          height: number;
          url: string;
          width: number;
        }[];
        name: string;
      };
      artists: {
        name: string;
      }[];
      duration_ms: number;
      name: string;
      popularity: number;
    };
    added_by: {
      id: string;
    };
    added_at: string;
  }
  let offset = 100;
  let id: string;

  function debounce<T extends (...args: any[]) => void>(
    func: T,
    wait: number
  ): (...args: Parameters<T>) => void {
    let timeout: NodeJS.Timeout | undefined;
    return (...args: Parameters<T>): void => {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  const formatDuration = (durationMs: number) => {
    const minutes = Math.floor(durationMs / 60000);
    const seconds = Math.floor((durationMs % 60000) / 1000);
    return `${minutes}:${seconds.toString().padStart(2, "0")}`;
  };

  const createPlaylistElement = (
    fetchedTrack: SpotifyTrack
  ): HTMLDivElement => {
    const playlistDiv = document.createElement("div");
    playlistDiv.className = "playlist";

    const descDiv = document.createElement("div");
    descDiv.className = "desc";
    playlistDiv.appendChild(descDiv);

    const cluster = document.createElement("div");
    cluster.className = "track-cluster";
    descDiv.appendChild(cluster);

    const image = document.createElement("img");
    image.src = fetchedTrack.track.album?.images[2]?.url
      ? fetchedTrack.track.album.images[2].url
      : "https://kagi.com/proxy/360_F_248426448_NVKLywWqArG2ADUxDq6QprtIzsF82dMF.jpg?c=l0oPx0FvhjhG2vnK29uE37OLQc-WdefmvQp_UcLKL29LDJEkeYiVhvf2KWXWGustLbBUuFUVTrSjFGd_d3GuBmPOffiZmHemGi6a-Uj_O0D_Dbnq01_FkRla6Ecmv6akMJ1xYVkRKnmiEtwwYeItBw%3D%3D";
    image.alt = "";
    image.width = 50;
    image.height = 50;
    cluster.appendChild(image);

    const nameHeading = document.createElement("p");
    nameHeading.textContent = fetchedTrack.track.name;
    cluster.appendChild(nameHeading);

    const artistsHeading = document.createElement("p");
    artistsHeading.textContent = fetchedTrack.track.artists
      .map((artist) => artist.name)
      .join(", ");
    descDiv.appendChild(artistsHeading);

    const addedByPara = document.createElement("p");
    addedByPara.textContent = fetchedTrack.added_by.id;
    descDiv.appendChild(addedByPara);

    const durationPara = document.createElement("p");
    durationPara.textContent = formatDuration(fetchedTrack.track.duration_ms);
    descDiv.appendChild(durationPara);

    return playlistDiv;
  };

  const isNearBottom = (): boolean => {
    const threshold: number = 20;
    const position: number = window.scrollY + window.innerHeight;
    const height: number = document.documentElement.scrollHeight;
    return position > height - threshold;
  };

  let globalOffset = 0;
  let loadingTracks = false;
  let allTracksLoaded = false;
  let songCount = 0;
  const songCountElement = document.getElementById("song-count")!;
  const songLoadElement = document.getElementById("fetch-indicator")!;
  const playlistElement = document.querySelector("playlist-id")!;
  const postButtonElement = document.getElementById("post-playlist-button")!;
  const fetchTracks = (
    currentOffset = 0,
    isLoading = false,
    allLoaded = false
  ) => {
    if (!loadingTracks && !allLoaded) {
      console.log("showing loading...");
      if (songLoadElement) {
        songLoadElement.style.display = "block";
        songLoadElement.classList.add("loading-fade");
      }
      loadingTracks = true;
      fetch(`/api/playlists/${id}/${globalOffset}/tracks/`)
        .then((response) => {
          console.log(response);
          return response.json();
        })
        .then((data) => {
          // Handle the response data
          data.items.forEach((song: SpotifyTrack) => {
            if (song.track !== null) {
              playlistElement?.appendChild(createPlaylistElement(song));
            }
          });
          globalOffset = globalOffset + 100;
          const newOffset = globalOffset;
          loadingTracks = false;
          if (songCountElement) {
            songCount = songCount + data.items.length;
            songCountElement.innerText = `${songCount} songs`;
          }
          fetchTracks(newOffset, false, data.items.length < 100);
        })
        .catch((error) => {
          // Handle any errors
          console.error("Error:", error);
          // fetchedData = [];
        });

      styleElement.textContent = cssContent;
    } else {
      if (songLoadElement) {
        songLoadElement.innerText = "All done!";
        if (postButtonElement) {
          postButtonElement.classList.remove("disabled");
        }
        setTimeout(() => {
          songLoadElement.classList.remove("loading-fade");
          songLoadElement.style.display = "none";
        }, 1000);
      }
    }
  };

  document.addEventListener("DOMContentLoaded", (e) => {
    fetchTracks(0, false, allTracksLoaded);
  });

  const styleElement = document.createElement("style");
  const cssContent = `
  .main-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  .header #track-name {
    margin-left: 1rem;
  }
  .track-cluster {
    display: flex;
    gap: 1rem;
  }
  .playlist {
    height: 5rem;
  }
  .playlist img {
    margin-left: 1rem;
  }
  .desc {
    text-overflow: ellipsis;
    width: 100%;
    display: grid;
    grid-template-columns: 3fr 2fr 2fr 1fr;
    grid-template-rows: 1fr;
    gap: 1rem;
  }
  .desc p {
    text-overflow: ellipsis;
    text-align: start;
  }
  .playlist {
    display: flex;
    align-items: center;
    gap: 3.7rem;
    border-top: 1px solid #ececec;
  }
  .playlist:nth-of-type(even) {
    background-color: #fafafb;
  }
  .playlist:hover {
    background-color: #ebebeb;
    transition: all 0.2s ease-out;
  }
  #loading-indicator {
    margin: 0 auto;
    background-color: gray;
    padding: 10rem 10rem;
    display: none;
  }
  `;

  // const debouncedScroll = debounce(handleScroll, 200);
  // window.addEventListener("scroll", debouncedScroll);

  class TrackListing extends HTMLElement {
    constructor() {
      super();
      document.head.appendChild(styleElement);
      console.log(this.dataset.allFetched);
      styleElement.textContent = cssContent;
      // Read the message from the data attribute.
      id = this.dataset.id ? this.dataset.id : "";
      allTracksLoaded = this.dataset.allFetched === "yes" ? true : false;
      console.log(`alltracks: ${allTracksLoaded}`);
    }
  }
  customElements.define("playlist-id", TrackListing);
</script>
