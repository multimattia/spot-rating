---
import type { Playlist } from "../types/spotifyTypes.d.ts";
import { Image } from "astro:assets";

let playlistDataArray: Playlist[];

if ("playlistData" in Astro.props && Array.isArray(Astro.props.playlistData)) {
  playlistDataArray = Astro.props.playlistData as Playlist[];
} else {
  playlistDataArray = [];
}
import "@styles/components/PlaylistEntry.scss";
---

<div class="main-list">
  {
    playlistDataArray.map((item, index) => (
      <>
        <a href={`playlists/${item.id}`}>
          <div class="playlist" data-content="Load">
            <Image src={item.images[0].url} alt="" width="100" height="100" />
            <div class="desc">
              <h2 class="nowrap ellipsify">{item.name}</h2>
              <h3>by {item.owner.display_name}</h3>
              <p class="nowrap ellipsify">{item.description}</p>
              {/* <p>{JSON.stringify(item, null, 2)}</p> */}
            </div>
          </div>
        </a>
      </>
    ))
  }
</div>

<style lang="scss">
  a {
    text-decoration: none;
  }

  .main-list {
    display: flex;
    flex-direction: column;
  }
  .playlist {
    display: flex;
    align-items: center;
    min-height: calc(var(--space-2xl) * 3);
    gap: var(--space-m);
  }

  .playlist > *:first-child {
    flex-shrink: 0;
    object-fit: cover;
  }

  .playlist:hover {
    background-color: var(--amber-2);
  }

  .playlist {
    background-color: var(--grass-4);
  }

  .playlist:hover {
    background-color: var(--grass-3);
  }

  .playlist::after {
    color: var(--grass-5);
  }

  .playlist::after:hover {
    color: var(--grass-2);
  }

  .playlist * {
    z-index: 2;
  }
</style>

<script>
  const playlistItems = document.querySelectorAll(".playlist");
  playlistItems.forEach((div) => {
    div.addEventListener("click", (e) => {
      e.stopPropagation();
      div.setAttribute("data-content", "Loading...");
    });
  });
</script>
