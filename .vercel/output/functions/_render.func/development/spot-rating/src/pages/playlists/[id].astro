---
const { id } = Astro.params;
import { db, User, Session, Playlists, eq, sql } from "astro:db";
import { Image } from "astro:assets";
import type PlaylistReturnObject from "../../types/spotifyTypes.ts";
import TrackListing from "@components/TrackListing.astro";
import { spotify } from "src/lib/auth";
import { GET } from "../api/playlists/[playlist]/[offset]/tracks.ts";
// import { insertSongWithRelations } from "../../lib/db-lib";

const luciaUser = Astro.locals.user;
if (!luciaUser) {
  return Astro.redirect("/login");
}

const existingUser = (
  await db
    .select()
    .from(User)
    .where(sql`${User.id} = ${luciaUser.id}`)
)[0];
console.log(existingUser);

const session = await db
  .select()
  .from(Session)
  .where(eq(existingUser.id, Session.userId));

const spotifyTrackResponse = await fetch(
  // `https://api.spotify.com/v1/playlists/${id}?fields=name%2Cimages%28url%2C+width%2C+height%29%2C+followers%28total%29%2C+owner%28id%2Cdisplay_name%29%2C+tracks%28items%28added_at%2C+added_by%28id%29%2Ctrack%28name%2C+album%28images%28%29%2C+name%29%2Cartists%28name%29%2Cduration_ms%29%2Ctotal%29`,
  `https://api.spotify.com/v1/playlists/${id}?fields=name%2Cid%2Cimages%28url%2C+width%2C+height%29%2C+followers%28total%29%2C+owner%28id%2Cdisplay_name%29%2C`,
  {
    headers: {
      Authorization: `Bearer ${session[0].accessToken}`,
    },
  }
);

let spotifyTrackData;
if (spotifyTrackResponse.ok) {
  spotifyTrackData = await spotifyTrackResponse.json();
  console.log(spotifyTrackData);
  try {
    await db.insert(Playlists).values({
      id: spotifyTrackData.id,
      userId: User.id,
      ownerId: spotifyTrackData.owner.id,
      name: spotifyTrackData.name,
    });
  } catch (e) {
    console.error(`id playlist endpoint error: ${e}`);
  }
  console.log(await db.select().from(Playlists));
} else {
  console.error(
    "error: ",
    spotifyTrackResponse.status,
    spotifyTrackResponse.statusText
  );
  spotifyTrackData = [];
}
---

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width" />
  <meta name="generator" content={Astro.generator} />
  <title>Lucia example</title>
</head>

<div class="playlist-header">
  <Image src={spotifyTrackData.images[0].url} alt="" width="200" height="200" />
  <div class="playlist-info">
    <h1>{spotifyTrackData.name}</h1>
    <h3>by {spotifyTrackData.owner.display_name}</h3>
    <h4>{spotifyTrackData.followers.total} followers</h4>
  </div>
</div>
<!-- <TrackListing trackData={spotifyTrackData.tracks.items} id={id} /> -->
<TrackListing id={id} />

<style>
  .playlist-header {
    margin: 3rem 1rem;
    padding-bottom: 2rem;
    display: flex;
    align-items: center;
    gap: 3rem;
    background: rgb(0, 0, 0);
    background: linear-gradient(
      347deg,
      rgba(0, 0, 0, 0.17) 0%,
      rgba(255, 255, 255, 1) 58%
    );
  }
</style>
